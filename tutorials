<Static Sites>
(How to run a webserver inside a Docker image)

- Download and run the static sites image
$ docker run --rm prakhar1989/static-site

- Stop the container to get to know how to see the website, what port is it 
running on, how do you access the container directly from your host machine
(The client is not exposing any ports)
Ctrl + c

- Re-run the docker run command to publish ports and Detach your terminal 
so that your terminal is not attached to the running container - Detached Mode/
(This way, you can happily close your terminal and keep the container running.)
(-d: detach your terminal / -p: publish all exposed ports to random ports /
--name: a name you want to give to the image that you are publishing ports to)
$ docker run -d -P --name static-site prakhar1989/static-site

- See and confirm the ports that are published to the static-site image
$ docker port static-site

- You can open http://localhost:{port number}
(e.g., http://localhost:32773/) - go with 80/tcp

- You can also specify a custom port to which the client will forward connections 
to the container
$ docker run -p 8888:80 prakhar1989/static-site

- To open static-site with the custom port, you need to know your Docker host's
IP address. To find out your Docker host's IP address
$ ip a

- Navigate to 3: docker0: ...> inet 172.17.0.1 / this is the IP address.

- You can not open static-site with the custom port(8888)
(e.g., http://172.17.0.1:8888/)

- To stop a detached container
$ docker stop {containerID}
(e.g., $ docker stop static-site / $ docker stop 9bc51c451b46)





<Creating your own Docker image>

- Clone the pre-made git repo (a Flask web app that displays a random car .gif)
(e.g., $ git clone https://github.com/prakhar1989/docker-curriculum.git)

- Navigate to the repo folder
(e.g., $ cd docker-curriculum/flask-app)

- Make a new Dockerfile from scratch (plain txt file with the name "Dockerfile")
:
-----------------------------------------------------
# specify your base image
FROM python:3

# set a directory for the app
WORKDIR /usr/src/app

# copy all the files to the container
COPY . .

# install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# define the port number the container should expose
EXPOSE 5000

# run the command
CMD ["python", "./app.py"]
-----------------------------------------------------

- In the same directory ($ cd docker-curriculum/flask-app), command docker build
(e.g., $ docker build -t mrki102/catnip .)

- See if your image shows
(e.g., $ docker images)

- Run the image to see if it actually works
(e.g., $ docker run -p 8888:5000 mrki102/catnip)

- Open the web page
(e.g., http://localhost:8888/)
(e.g., http://172.17.0.1:8888/)





<Docker on AWS with AWS Elastic Beanstalk>

- Logging into DockerHub (If this is the first time you are pushing an image)
(e.g., docker login)
(Username: mrki102)
(Password: *******************)

- Publish your image on a registry (DockerHub) which can be accessed by AWS
(e.g., $ docker push mrki102/catnip)

- Check your published image on DockerHub
(https://hub.docker.com/repository/docker/mrki102/catnip)

- Now that your image is online, anyone who has docker installed can play with 
your app by typing just a single command.
(e.g., $ docker run -p 8888:5000 mrki102/catnip)

- Now you can open the web page
(e.g., http://localhost:8888/)
(e.g., http://172.17.0.1:8888/)

--- AWS Elastic Beanstalk (EB) ---
(As a developer, you tell EB how to run your app and it takes care of the rest.)

- Log into your AWS console

- Click on Elastic Beanstalk. It will be in the compute section.

- Click on "Create Application" in the top right
Give your app a memorable (but unique) name (e.g., Cat GIF)

- Platform: Docker

- Application code: Upload your code

- Open the "Dockerrun.aws.json" file located in the flask-app folder and edit 
the name of the image to your image's name (e.g., "mrki102/catnip").

- Click on "Choose file" and choose this "Dockerrun.aws.json" file and upload.

- Click on "Create application" ( It typically takes around 5 minutes for the 
first-time setup)

* About "Dockerrun.aws.json"
This file is basically an AWS specific file that tells EB details about our 
application and docker configuration.
-------------------------------
{
  "AWSEBDockerrunVersion": "1",
  "Image": {
    "Name": "mrki102/catnip",
    "Update": "true"
  },
  "Ports": [
    {
      "ContainerPort": 5000,
      "HostPort": 8000
    }
  ],
  "Logging": "/var/log/nginx"
}
-------------------------------
We provide the name of the image that EB should use along with a port that the 
container should open.

- When setup is done, your instance is ready. Head over to the EB page 
and you should see a green tick indicating that your app is alive and kicking.

- Go ahead and open the URL in your browser and feel free to share with others.
(e.g., http://catgif-env.eba-77ksepzu.eu-west-2.elasticbeanstalk.com/)
